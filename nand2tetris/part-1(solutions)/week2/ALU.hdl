// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/2/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the two output bits:
 * if (out == 0) zr = 1, else zr = 0
 * if (out < 0)  ng = 1, else ng = 0
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not

CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // if (out == 0) equals 1, else 0
        ng;      // if (out < 0)  equals 1, else 0

    PARTS:
    // Process x (zx and nx)
     // if zx=1, x=0
     Mux16(a=x , b=false , sel=zx , out=zeroedx );

     // if nx=1, x=!x
     Not16(in=zeroedx , out=notx );
     Mux16(a=zeroedx , b=notx , sel=nx , out=xfinal );

    // Process y (zy and ny)
    // if zy=1, y=0
     Mux16(a=y , b=false , sel=zy , out=zeroedy );

     // if ny=1, y=!y
     Not16(in=zeroedy , out=noty );
     Mux16(a=zeroedy , b=noty , sel=ny , out=yfinal );

    // Process f ( x+y and x&y )
    Add16(a=xfinal , b=yfinal , out=xplusy );
    And16(a=xfinal , b=yfinal , out=xandy );
    Mux16(a=xandy , b=xplusy , sel=f , out=funcout );

    // Process no
    Not16(in=funcout , out=negatedout );
    Mux16(a=funcout , b=negatedout , sel=no , out[0..7]=half1, out[8..15]=half2, out[15]=msbbit, out=out  );

    // Calculate zr => zr=1 if all bits of output=0, Or16way made using Or8way
    Or8Way(in=half1, out=temp1);
    Or8Way(in=half2, out=temp2);
    Or(a=temp1, b=temp2, out=tempzr);
    Not(in=tempzr, out=zr);

    // Calculate ng
    Or(a=msbbit, b=false, out=ng);
}